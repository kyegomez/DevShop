#!/usr/bin/env python3
"""
Script to deploy all generated apps to Vercel as simple Next.js applications
"""

import os
import json
import subprocess
import sys
from pathlib import Path
import shutil

def create_nextjs_app(app_path, app_name, readme_content):
    """Convert a generated app to a deployable Next.js app"""
    
    # Create package.json
    package_json = {
        "name": app_name.lower().replace(" ", "-").replace("_", "-"),
        "version": "0.1.0",
        "private": True,
        "scripts": {
            "dev": "next dev",
            "build": "next build",
            "start": "next start",
            "lint": "next lint"
        },
        "dependencies": {
            "react": "^18",
            "react-dom": "^18",
            "next": "14.0.0"
        },
        "devDependencies": {
            "typescript": "^5",
            "@types/react": "^18",
            "@types/node": "^20"
        }
    }
    
    with open(app_path / "package.json", "w") as f:
        json.dump(package_json, f, indent=2)
    
    # Create next.config.js
    next_config = """/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'standalone',
  trailingSlash: true,
}

module.exports = nextConfig"""
    
    with open(app_path / "next.config.js", "w") as f:
        f.write(next_config)
    
    # Create app directory structure
    app_dir = app_path / "app"
    app_dir.mkdir(exist_ok=True)
    
    # Create layout.tsx
    layout_tsx = f"""import type {{ Metadata }} from 'next'

export const metadata: Metadata = {{
  title: '{app_name}',
  description: 'Generated by DevShop Multi-App Generator',
}}

export default function RootLayout({{
  children,
}}: {{
  children: React.ReactNode
}}) {{
  return (
    <html lang="en">
      <body style={{{{
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
        margin: 0,
        padding: '2rem',
        backgroundColor: '#f8fafc',
        lineHeight: '1.6'
      }}}}>
        {{children}}
      </body>
    </html>
  )
}}"""
    
    with open(app_dir / "layout.tsx", "w") as f:
        f.write(layout_tsx)
    
    # Parse README content
    lines = readme_content.strip().split('\n')
    title = lines[0].replace('# ', '') if lines else app_name
    
    description = ""
    goal = ""
    target_user = ""
    problem = ""
    design = ""
    tech_stack = ""
    
    current_section = ""
    for line in lines:
        if line.startswith('## Description'):
            current_section = "description"
        elif line.startswith('## Goal'):
            current_section = "goal"
        elif line.startswith('## Target User'):
            current_section = "target_user"
        elif line.startswith('## Problem Solved'):
            current_section = "problem"
        elif line.startswith('## Design Preferences'):
            current_section = "design"
        elif line.startswith('## Tech Stack'):
            current_section = "tech_stack"
        elif line.startswith('##'):
            current_section = ""
        elif current_section and line.strip() and not line.startswith('#'):
            if current_section == "description":
                description = line.strip()
            elif current_section == "goal":
                goal = line.strip()
            elif current_section == "target_user":
                target_user = line.strip()
            elif current_section == "problem":
                problem = line.strip()
            elif current_section == "design":
                design = line.strip()
            elif current_section == "tech_stack":
                tech_stack = line.strip()
    
    # Create page.tsx with app information
    page_tsx = f"""export default function HomePage() {{
  return (
    <div style={{{{
      maxWidth: '800px',
      margin: '0 auto',
      padding: '2rem'
    }}}}>
      <header style={{{{
        textAlign: 'center',
        marginBottom: '3rem',
        padding: '2rem',
        backgroundColor: 'white',
        borderRadius: '12px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
      }}}}>
        <h1 style={{{{
          fontSize: '2.5rem',
          color: '#1e293b',
          marginBottom: '0.5rem'
        }}}}>
          {title}
        </h1>
        <p style={{{{
          fontSize: '1.2rem',
          color: '#64748b',
          margin: 0
        }}}}>
          {description}
        </p>
      </header>

      <div style={{{{
        display: 'grid',
        gap: '1.5rem',
        marginBottom: '2rem'
      }}}}>
        <section style={{{{
          backgroundColor: 'white',
          padding: '1.5rem',
          borderRadius: '8px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
        }}}}>
          <h2 style={{{{
            color: '#3b82f6',
            marginBottom: '0.5rem'
          }}}}>üéØ Goal</h2>
          <p style={{{{ margin: 0, color: '#475569' }}}}>{goal}</p>
        </section>

        <section style={{{{
          backgroundColor: 'white',
          padding: '1.5rem',
          borderRadius: '8px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
        }}}}>
          <h2 style={{{{
            color: '#10b981',
            marginBottom: '0.5rem'
          }}}}>üë• Target Users</h2>
          <p style={{{{ margin: 0, color: '#475569' }}}}>{target_user}</p>
        </section>

        <section style={{{{
          backgroundColor: 'white',
          padding: '1.5rem',
          borderRadius: '8px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
        }}}}>
          <h2 style={{{{
            color: '#f59e0b',
            marginBottom: '0.5rem'
          }}}}>üîß Problem Solved</h2>
          <p style={{{{ margin: 0, color: '#475569' }}}}>{problem}</p>
        </section>

        <section style={{{{
          backgroundColor: 'white',
          padding: '1.5rem',
          borderRadius: '8px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
        }}}}>
          <h2 style={{{{
            color: '#8b5cf6',
            marginBottom: '0.5rem'
          }}}}>üé® Design Style</h2>
          <p style={{{{ margin: 0, color: '#475569' }}}}>{design}</p>
        </section>

        <section style={{{{
          backgroundColor: 'white',
          padding: '1.5rem',
          borderRadius: '8px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
        }}}}>
          <h2 style={{{{
            color: '#ef4444',
            marginBottom: '0.5rem'
          }}}}>‚ö° Tech Stack</h2>
          <p style={{{{ margin: 0, color: '#475569' }}}}>{tech_stack}</p>
        </section>
      </div>

      <footer style={{{{
        textAlign: 'center',
        padding: '2rem',
        backgroundColor: 'white',
        borderRadius: '8px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        marginTop: '2rem'
      }}}}>
        <p style={{{{
          margin: 0,
          color: '#64748b',
          fontSize: '0.9rem'
        }}}}>
          ü§ñ Generated by{' '}
          <strong style={{{{ color: '#3b82f6' }}}}>DevShop Multi-App Generator</strong>
        </p>
        <p style={{{{
          margin: '0.5rem 0 0 0',
          color: '#94a3b8',
          fontSize: '0.8rem'
        }}}}>
          Ready for full implementation with Claude Code
        </p>
      </footer>
    </div>
  )
}}"""
    
    with open(app_dir / "page.tsx", "w") as f:
        f.write(page_tsx)
    
    # Create tsconfig.json
    tsconfig = {
        "compilerOptions": {
            "target": "es5",
            "lib": ["dom", "dom.iterable", "esnext"],
            "allowJs": True,
            "skipLibCheck": True,
            "strict": True,
            "noEmit": True,
            "esModuleInterop": True,
            "module": "esnext",
            "moduleResolution": "bundler",
            "resolveJsonModule": True,
            "isolatedModules": True,
            "jsx": "preserve",
            "incremental": True,
            "plugins": [{"name": "next"}],
            "paths": {"@/*": ["./*"]}
        },
        "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
        "exclude": ["node_modules"]
    }
    
    with open(app_path / "tsconfig.json", "w") as f:
        json.dump(tsconfig, f, indent=2)

def deploy_app_to_vercel(app_path, app_name, token):
    """Deploy a single app to Vercel"""
    print(f"\\nüöÄ Deploying {app_name}...")
    
    os.chdir(app_path)
    
    try:
        # Install dependencies
        result = subprocess.run(
            ["npm", "install", "--silent"],
            capture_output=True,
            text=True,
            timeout=60
        )
        
        if result.returncode != 0:
            print(f"‚ùå Failed to install dependencies for {app_name}")
            return None
        
        # Deploy to Vercel
        result = subprocess.run(
            ["vercel", "--token", token, "--prod", "--yes"],
            capture_output=True,
            text=True,
            timeout=120
        )
        
        if result.returncode == 0:
            # Extract URL from output
            output_lines = result.stdout.strip().split('\\n')
            url = None
            for line in output_lines:
                if line.startswith('https://') and 'vercel.app' in line:
                    url = line.strip()
                    break
            
            if url:
                print(f"‚úÖ {app_name}: {url}")
                return url
            else:
                print(f"‚ö†Ô∏è  {app_name}: Deployed but URL not found in output")
                return f"Deployed (check Vercel dashboard)"
        else:
            print(f"‚ùå Failed to deploy {app_name}: {result.stderr}")
            return None
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ Timeout deploying {app_name}")
        return None
    except Exception as e:
        print(f"‚ùå Error deploying {app_name}: {e}")
        return None

def main():
    """Main deployment script"""
    generated_apps_dir = Path("generated_apps")
    token = "WKa82HKKJZTvBXMb8KBJp1Wb"
    
    if not generated_apps_dir.exists():
        print("‚ùå No generated_apps directory found!")
        sys.exit(1)
    
    # Get all app directories
    app_dirs = [d for d in generated_apps_dir.iterdir() if d.is_dir() and d.name != "__pycache__"]
    
    print(f"üîç Found {len(app_dirs)} apps to deploy")
    
    deployment_urls = {}
    original_dir = os.getcwd()
    
    for app_dir in app_dirs:
        app_name = app_dir.name.replace("_", " ").title()
        
        # Read README content
        readme_path = app_dir / "README.md"
        if readme_path.exists():
            readme_content = readme_path.read_text()
        else:
            readme_content = f"# {app_name}\\n\\nGenerated application"
        
        print(f"\\nüì¶ Preparing {app_name}...")
        
        # Create Next.js structure
        create_nextjs_app(app_dir, app_name, readme_content)
        
        # Deploy to Vercel
        url = deploy_app_to_vercel(app_dir, app_name, token)
        if url:
            deployment_urls[app_name] = url
        
        # Return to original directory
        os.chdir(original_dir)
    
    # Print final summary
    print("\\n" + "="*60)
    print("üéâ DEPLOYMENT SUMMARY")
    print("="*60)
    
    successful_deployments = [name for name, url in deployment_urls.items() if url]
    
    print(f"‚úÖ Successfully deployed: {len(successful_deployments)}/{len(app_dirs)}")
    print(f"‚ùå Failed deployments: {len(app_dirs) - len(successful_deployments)}")
    
    if deployment_urls:
        print("\\nüîó LIVE DEPLOYMENT URLS:")
        for app_name, url in deployment_urls.items():
            print(f"  ‚Ä¢ {app_name}: {url}")
    
    # Save results to file
    with open("deployment_urls.json", "w") as f:
        json.dump(deployment_urls, f, indent=2)
    
    print(f"\\nüíæ Results saved to deployment_urls.json")

if __name__ == "__main__":
    main()